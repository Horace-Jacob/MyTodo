@using BlazorApp.Shared.Models
@inject HttpClient HttpClient
@using BlazorApp.Client.Components
@inject NavigationManager NavigationManager
@using System.Text.Json

<table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Id</th>
                <th>Title</th>
				<th>Actions</th>
            </tr>
        </thead>
		<tbody>
			@foreach(var todo in todoList)
			{
				<tr>
					<td>@todo.TodoId</td>
					<td>@todo.Title</td>
					@* <td>
                        <a @onclick="() => OpenModalDialog(todo.TodoId)" class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/deletetodo/@todo.TodoId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td> *@
                    <TodoListAction todo="todo" OpenModalDialog="() => OpenModalDialog(todo.TodoId)" />
				</tr>
			}
			
		</tbody>
</table>

@if(OpenModal)
{
	<ModalDialog todo="@todo" OnClose="@EditTodo" DialogType="ModalDialog.ModalDialogType.EditCancel" >
        <InputField>
            <input @bind="todo.Title" />
        </InputField>
    </ModalDialog>
	
}

@code
{
    protected Todo todo = new();
    [Parameter]
    public List<Todo> todoList {get; set;}

    private bool OpenModal {get; set;}
    private int totalPages;
	private int currentPage = 1;

    protected async Task OpenModalDialog(int id)
	{
		OpenModal = true;
		todo = await HttpClient.GetFromJsonAsync<Todo>("https://localhost:7047/todos/" + id);
		StateHasChanged();
	}

    protected async Task GetTodos(int page = 1, int pageSize = 5)
	{
		var httpResponse = await HttpClient.GetAsync(NavigationManager.BaseUri + $"todos?page={page}&pageSize={pageSize}");
		if(httpResponse.IsSuccessStatusCode)
		{
			totalPages = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
			var responseString = await httpResponse.Content.ReadAsStringAsync();
			todoList = JsonSerializer.Deserialize<List<Todo>>(responseString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
		}
		else
		{
			
		}

	}

    protected async Task EditTodo()
	{
		await HttpClient.PutAsJsonAsync(NavigationManager.BaseUri + "todos", todo);
		OpenModal = false;
		await GetTodos();
		StateHasChanged();
	}
}